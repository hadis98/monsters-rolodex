{"version":3,"sources":["component/card-list/card/card.component.jsx","component/card-list/card-list.component.jsx","component/card-list/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFiled","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJTC,G,MAAW,SAACR,GAAD,OAEpB,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJ7CO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgDjEG,E,kDA9Cb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SATpC,EAAKC,MAAQ,CACZb,SAAS,GACTU,YAAY,IANF,E,qDAkBb,WAAoB,IAAD,OAEjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAC5EF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAIzC,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAEXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAGA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYc,wBACnG,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAgBe,KAAKf,eAMrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.51b18518.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './card.style.css';\n\nexport const Card = (props) =>(\n<div className='card-container'>\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n</div>\n)\n","import React from 'react';\nimport {Card} from '../card-list/card/card.component';\nimport './card-list.styles.css'\n\nexport const CardList = (props) =>(\n\n    <div className='card-list'>{\n        props.monsters.map(monster => (<Card key={monster.id} monster={monster}/>)) \n        }\n      \n      </div>\n      \n    \n)","import { React } from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder,handleChange}) =>(\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}\n/>\n\n\n);","\nimport './App.css';\nimport { Component } from 'react';\nimport {CardList} from './component/card-list/card-list.component'\nimport { SearchBox } from \"./component/card-list/search-box/search-box.component\";\nclass App extends Component{\n  constructor(){\n    super();\n\n\n    this.state = {\n     monsters:[],\n     searchFiled:''\n     \n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n//arwo function bind automatically \n  handleChange = (e)=>{\n    this.setState({searchFiled:e.target.value});\n  }\n  // handleChange(e){\n  //   this.setState({searchFiled:e.target.value});\n  // }\n  componentDidMount(){\n\n    fetch('https://jsonplaceholder.typicode.com/users').then(response =>response.json())\n    .then(users => this.setState({monsters:users}));\n    \n  }\n\n  render(){\n    const {monsters, searchFiled} = this.state;//= const monsters = this.state.monsters;\n    //const searchFiled = this.state.searchFiled;\n    const filteredMonsters = monsters.filter(monster =>monster.name.toLowerCase().includes(searchFiled.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" \n        handleChange = {this.handleChange}\n        // handleChange={e=>this.setState({searchFiled:e.target.value})}\n        \n        \n        />\n        \n        <CardList monsters={filteredMonsters}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}